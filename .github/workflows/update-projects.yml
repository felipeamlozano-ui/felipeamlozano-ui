name: Atualizar projetos recentes no README

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */2 * * *'
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar reposit√≥rio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Buscar 3 reposit√≥rios mais recentes
        id: repos
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const username = 'felipeamlozano-ui';

            // Busca os 3 √∫ltimos reposit√≥rios atualizados
            const { data: repos } = await github.rest.repos.listForUser({
              username,
              sort: 'updated',
              direction: 'desc',
              per_page: 3
            });

            // Busca topics para escolher imagem tem√°tica
            async function getTopics(owner, repo) {
              try {
                const { data } = await github.rest.repos.getAllTopics({ owner, repo });
                return data.names || [];
              } catch { return []; }
            }

            // Fallback de descri√ß√£o: resumo curto do README
            async function getReadmeSummary(owner, repo) {
              try {
                const { data } = await github.rest.repos.getReadme({ owner, repo });
                const content = Buffer.from(data.content, 'base64').toString('utf8');
                const lines = content.split(/\r?\n/);
                const firstPara = [];
                for (const line of lines) {
                  const clean = line.trim();
                  if (!clean) { if (firstPara.length) break; continue; }
                  if (/^#{1,6}\s/.test(clean)) continue;    // ignora t√≠tulos
                  if (/!\[.*\]\(.*\)/.test(clean)) continue; // ignora imagens/badges
                  firstPara.push(clean);
                }
                const summary = firstPara.join(' ');
                return summary ? summary.slice(0, 200) : null;
              } catch { return null; }
            }

            // Escolhe thumbnail tem√°tica baseada em topics ou linguagem
            function pickImage(repo, topics) {
              const name = (repo.language || '').toLowerCase();
              const all = (topics || []).map(t => t.toLowerCase());
              const match = (keys) => keys.some(k => all.includes(k) || name.includes(k));

              // Palavras-chave -> imagens Unsplash (sem API key; fotos livres)
              if (match(['web', 'site', 'html', 'css', 'javascript', 'frontend'])) {
                return 'https://images.unsplash.com/photo-1520974735194-9d56ad4a8b28?w=800&q=80';
              }
              if (match(['python', 'data', 'ml', 'ai'])) {
                return 'https://images.unsplash.com/photo-1555949963-ff9fe0c870eb?w=800&q=80';
              }
              if (match(['mobile', 'android', 'ios'])) {
                return 'https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=800&q=80';
              }
              if (match(['audio', 'music', 'sound'])) {
                return 'https://images.unsplash.com/photo-1511376777868-611b54f68947?w=800&q=80';
              }
              if (match(['php', 'backend', 'api'])) {
                return 'https://images.unsplash.com/photo-1556157382-97eda2d62296?w=800&q=80';
              }
              // Fallback variado por hash do repo.id
              const choices = [
                'https://images.unsplash.com/photo-1518770660439-4636190af475?w=800&q=80',
                'https://images.unsplash.com/photo-1519389950473-47ba0277781c?w=800&q=80',
                'https://images.unsplash.com/photo-1517433456452-f9633a875f6f?w=800&q=80'
              ];
              return choices[repo.id % choices.length];
            }

            // Monta uma TABELA de 3 colunas para garantir lado-a-lado
            let html = '<table><tr>\n';

            for (let i = 0; i < repos.length; i++) {
              const repo = repos[i];
              const topics = await getTopics(repo.owner.login, repo.name);
              const descPrimary = repo.description?.trim();
              const descFallback = await getReadmeSummary(repo.owner.login, repo.name);
              const desc = (descPrimary || descFallback || 'Sem descri√ß√£o ainda.')
                .replace(/</g, '&lt;').replace(/>/g, '&gt;');

              const img = pickImage(repo, topics);

              html +=
                `<td align="center" valign="top" style="padding:10px;">
                  <a href="${repo.html_url}" target="_blank" style="text-decoration:none;">
                    <img src="${img}" alt="${repo.name}" width="260" height="150" style="border-radius:12px; object-fit:cover;" />
                    <div style="margin-top:8px; font-weight:700; font-size:14px; color:#1f2328;">${repo.name}</div>
                    <div style="margin-top:6px; max-width:260px; font-size:12.5px; line-height:1.45; color:#4b5563;">
                      ${desc}
                    </div>
                  </a>
                </td>\n`;
            }

            html += '</tr></table>';

            return html;

      - name: Salvar HTML gerado em arquivo (heredoc)
        run: |
          cat > section.html <<'SECTION'
          ${{ steps.repos.outputs.result }}
          SECTION

      - name: Atualizar README.md com a se√ß√£o de projetos
        run: |
          python << 'PY'
          import re, io

          with io.open('section.html', 'r', encoding='utf-8') as f:
              section = f.read()

          with io.open('README.md', 'r', encoding='utf-8') as f:
              readme = f.read()

          pattern = r'<!-- start-projects -->[\\s\\S]*?<!-- end-projects -->'
          replacement = '<!-- start-projects -->\\n' + section + '\\n<!-- end-projects -->'

          if re.search(pattern, readme):
              readme = re.sub(pattern, replacement, readme)
              print('README atualizado: se√ß√£o substitu√≠da.')
          else:
              readme += '\\n\\n' + replacement + '\\n'
              print('README atualizado: se√ß√£o adicionada.')

          with io.open('README.md', 'w', encoding='utf-8') as f:
              f.write(readme)
          PY

      - name: Commitar e enviar altera√ß√µes (se houver)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          if git diff --cached --quiet; then
            echo "‚úÖ Nenhuma altera√ß√£o para commitar"
          else
            git commit -m "üîÑ Atualiza√ß√£o autom√°tica dos √∫ltimos projetos"
            git push origin HEAD:main
          fi
