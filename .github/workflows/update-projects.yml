name: Atualizar projetos recentes no README

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */2 * * *' # roda a cada 2 horas
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar reposit√≥rio
        uses: actions/checkout@v4

      - name: Buscar 3 reposit√≥rios mais recentes
        id: repos
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const username = 'felipeamlozano-ui';
            const { data: repos } = await github.rest.repos.listForUser({
              username,
              sort: 'updated',
              direction: 'desc',
              per_page: 3
            });

            // Monta HTML sem usar template literals com ${} para n√£o conflitar com YAML
            let projectsHTML = '<p align="center">\n';
            projectsHTML += repos.map(repo =>
              '  <a href="' + repo.html_url + '" target="_blank" style="margin: 10px;">\n' +
              '    <img src="https://opengraph.githubassets.com/1/' + repo.full_name + '" width="250px" height="140px" style="border-radius:10px;"/>\n' +
              '    <br/>\n' +
              '    <b>' + repo.name + '</b><br/>\n' +
              '    <sub>' + (repo.description ? repo.description : 'Sem descri√ß√£o ainda.') + '</sub>\n' +
              '  </a>\n'
            ).join('');
            projectsHTML += '</p>';

            core.setOutput("projects", projectsHTML);

      - name: Salvar HTML gerado em arquivo
        env:
          PROJECTS_HTML: ${{ steps.repos.outputs.projects }}
        run: |
          printf "%s" "$PROJECTS_HTML" > section.html

      - name: Atualizar README.md com a se√ß√£o de projetos
        run: |
          python << 'PY'
          import re, io, sys

          # L√™ a se√ß√£o gerada
          with io.open('section.html', 'r', encoding='utf-8') as f:
              section = f.read()

          # L√™ o README
          with io.open('README.md', 'r', encoding='utf-8') as f:
              readme = f.read()

          # Padr√£o da se√ß√£o entre marcadores
          pattern = r'<!-- start-projects -->[\\s\\S]*?<!-- end-projects -->'

          if re.search(pattern, readme):
              readme = re.sub(pattern, f'<!-- start-projects -->\n{section}\n<!-- end-projects -->', readme)
              print('README atualizado: se√ß√£o substitu√≠da.')
          else:
              readme += '\n\n<!-- start-projects -->\n' + section + '\n<!-- end-projects -->\n'
              print('README atualizado: se√ß√£o adicionada.')

          with io.open('README.md', 'w', encoding='utf-8') as f:
              f.write(readme)
          PY

      - name: Commitar e enviar altera√ß√µes (se houver)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          if git diff --cached --quiet; then
            echo "‚úÖ Nenhuma altera√ß√£o para commitar"
          else
            git commit -m "üîÑ Atualiza√ß√£o autom√°tica dos √∫ltimos projetos"
            git push
          fi
