name: Atualizar projetos recentes no README

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */2 * * *'
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar reposit√≥rio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Buscar 3 reposit√≥rios mais recentes
        id: repos
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const username = 'felipeamlozano-ui';

            const { data: repos } = await github.rest.repos.listForUser({
              username,
              sort: 'updated',
              direction: 'desc',
              per_page: 3
            });

            async function getTopics(owner, repo) {
              try {
                const { data } = await github.rest.repos.getAllTopics({ owner, repo });
                return data.names || [];
              } catch { return []; }
            }

            async function getReadmeSummary(owner, repo) {
              try {
                const { data } = await github.rest.repos.getReadme({ owner, repo });
                const content = Buffer.from(data.content, 'base64').toString('utf8');
                const lines = content.split(/\r?\n/);
                const firstPara = [];
                for (const line of lines) {
                  const clean = line.trim();
                  if (!clean) { if (firstPara.length) break; continue; }
                  if (/^#{1,6}\s/.test(clean)) continue;
                  if (/!\[.*\]\(.*\)/.test(clean)) continue;
                  firstPara.push(clean);
                }
                const summary = firstPara.join(' ');
                return summary ? summary.slice(0, 200) : null;
              } catch { return null; }
            }

            function pickImage(repo, topics) {
              const name = (repo.language || '').toLowerCase();
              const all = (topics || []).map(t => t.toLowerCase());
              const match = (keys) => keys.some(k => all.includes(k) || name.includes(k));

              if (match(['web','site','html','css','javascript','frontend']))
                return 'https://images.unsplash.com/photo-1519389950473-47ba0277781c?w=640&q=80';
              if (match(['python','data','ml','ai']))
                return 'https://images.unsplash.com/photo-1555949963-ff9fe0c870eb?w=640&q=80';
              if (match(['audio','music','sound']))
                return 'https://images.unsplash.com/photo-1511376777868-611b54f68947?w=640&q=80';
              if (match(['mobile','android','ios']))
                return 'https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=640&q=80';
              if (match(['php','backend','api']))
                return 'https://images.unsplash.com/photo-1556157382-97eda2d62296?w=640&q=80';

              const choices = [
                'https://images.unsplash.com/photo-1518770660439-4636190af475?w=640&q=80',
                'https://images.unsplash.com/photo-1517433456452-f9633a875f6f?w=640&q=80',
                'https://images.unsplash.com/photo-1520974735194-9d56ad4a8b28?w=640&q=80'
              ];
              return choices[repo.id % choices.length];
            }

            // Monta tabela Markdown com 3 colunas
            let rowImgs = [];
            let rowTitles = [];
            let rowDescs = [];

            for (const repo of repos) {
              const topics = await getTopics(repo.owner.login, repo.name);
              const img = pickImage(repo, topics);
              const descPrimary = repo.description?.trim();
              const descFallback = await getReadmeSummary(repo.owner.login, repo.name);
              const desc = (descPrimary || descFallback || 'Sem descri√ß√£o ainda.')
                .replace(/\|/g, '\\|'); // evitar quebrar tabela

              rowImgs.push(`[![${repo.name}](${img})](${repo.html_url})`);
              rowTitles.push(`[${repo.name}](${repo.html_url})`);
              rowDescs.push(desc);
            }

            // Se n√£o vierem 3 repos por algum motivo, completa com vazio
            while (rowImgs.length < 3) { rowImgs.push(''); rowTitles.push(''); rowDescs.push(''); }

            const table = `
<table>
  <tr>
    <td align="center" width="33%">${rowImgs[0]}</td>
    <td align="center" width="33%">${rowImgs[1]}</td>
    <td align="center" width="33%">${rowImgs[2]}</td>
  </tr>
  <tr>
    <td align="center"><strong>${rowTitles[0]}</strong></td>
    <td align="center"><strong>${rowTitles[1]}</strong></td>
    <td align="center"><strong>${rowTitles[2]}</strong></td>
  </tr>
  <tr>
    <td align="center">${rowDescs[0]}</td>
    <td align="center">${rowDescs[1]}</td>
    <td align="center">${rowDescs[2]}</td>
  </tr>
</table>
`.trim();

            return table;

      - name: Salvar HTML gerado em arquivo (heredoc)
        run: |
          cat > section.html <<'SECTION'
          ${{ steps.repos.outputs.result }}
          SECTION

      - name: Atualizar README.md com a se√ß√£o de projetos
        run: |
          python << 'PY'
          import re, io

          with io.open('section.html', 'r', encoding='utf-8') as f:
              section = f.read()

          with io.open('README.md', 'r', encoding='utf-8') as f:
              readme = f.read()

          pattern = r'<!-- start-projects -->[\\s\\S]*?<!-- end-projects -->'
          replacement = '<!-- start-projects -->\\n' + section + '\\n<!-- end-projects -->'

          if re.search(pattern, readme):
              readme = re.sub(pattern, replacement, readme)
              print('README atualizado: se√ß√£o substitu√≠da.')
          else:
              readme += '\\n\\n' + replacement + '\\n'
              print('README atualizado: se√ß√£o adicionada.')

          with io.open('README.md', 'w', encoding='utf-8') as f:
              f.write(readme)
          PY

      - name: Commitar e enviar altera√ß√µes (se houver)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          if git diff --cached --quiet; then
            echo "‚úÖ Nenhuma altera√ß√£o para commitar"
          else
            git commit -m "üîÑ Atualiza√ß√£o autom√°tica dos √∫ltimos projetos"
            git push origin HEAD:main
          fi
