name: Atualizar projetos recentes no README

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */2 * * *'
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar reposit√≥rio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Buscar 3 reposit√≥rios mais recentes
        id: repos
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const username = 'felipeamlozano-ui';

            // Busca os 3 √∫ltimos reposit√≥rios atualizados
            const { data: repos } = await github.rest.repos.listForUser({
              username,
              sort: 'updated',
              direction: 'desc',
              per_page: 3
            });

            // Fallback de descri√ß√£o: resumo curto do README
            async function getReadmeSummary(owner, repo) {
              try {
                const { data } = await github.rest.repos.getReadme({ owner, repo });
                const content = Buffer.from(data.content, 'base64').toString('utf8');
                const lines = content.split(/\r?\n/);
                const firstPara = [];
                for (const line of lines) {
                  const clean = line.trim();
                  if (!clean) { if (firstPara.length) break; continue; }
                  if (/^#{1,6}\s/.test(clean)) continue;           // ignora t√≠tulos
                  if (/!\[.*\]\(.*\)/.test(clean)) continue;        // ignora imagens/badges
                  firstPara.push(clean);
                }
                const summary = firstPara.join(' ');
                return summary ? summary.slice(0, 180) : null;
              } catch { return null; }
            }

            // Fundo √∫nico por projeto
            function gradientForRepo(repo) {
              const h1 = repo.id % 360;
              const h2 = (repo.id * 7) % 360;
              return `linear-gradient(135deg, hsl(${h1},70%,20%) 0%, hsl(${h2},70%,30%) 100%)`;
            }

            // Tr√™s imagens diferentes alternando por √≠ndice
            function imageForIndex(i, repo) {
              const variants = [
                `https://opengraph.githubassets.com/1/${repo.full_name}`,                   // Open Graph
                (repo.owner?.avatar_url ? `${repo.owner.avatar_url}&s=280` : 'https://avatars.githubusercontent.com/u/0?s=280'), // Avatar
                `https://api.dicebear.com/7.x/identicon/svg?seed=${encodeURIComponent(repo.full_name)}` // Identicon
              ];
              return variants[i % variants.length];
            }

            // Monta HTML dos cards
            let projectsHTML = '<div align="center" style="display:flex; flex-wrap:wrap; justify-content:center;">\n';
            for (let i = 0; i < repos.length; i++) {
              const repo = repos[i];
              const descPrimary = repo.description?.trim();
              const descFallback = await getReadmeSummary(repo.owner.login, repo.name);
              const desc = (descPrimary || descFallback || 'Sem descri√ß√£o ainda.')
                .replace(/</g, '&lt;').replace(/>/g, '&gt;');

              const bg = gradientForRepo(repo);
              const img = imageForIndex(i, repo);

              projectsHTML +=
                `<a href="${repo.html_url}" target="_blank" style="margin:12px; text-decoration:none; color:#1f2328;">
                  <div style="
                    width:270px; border-radius:12px; overflow:hidden;
                    box-shadow:0 6px 14px rgba(0,0,0,0.15);
                    background:${bg};
                    border:1px solid rgba(0,0,0,0.08);
                  ">
                    <img src="${img}" alt="${repo.name} imagem"
                      style="width:100%; height:150px; object-fit:cover; display:block;"/>
                    <div style="padding:12px 14px; background:#ffffffcc; text-align:left;">
                      <div style="font-weight:700; font-size:14.5px; line-height:1.35; margin-bottom:6px;">${repo.name}</div>
                      <div style="font-size:12.5px; line-height:1.45; color:#4b5563;">${desc}</div>
                    </div>
                  </div>
                </a>\n`;
            }
            projectsHTML += '</div>';

            // Retorna como resultado (multiline seguro)
            return projectsHTML;

      - name: Salvar HTML gerado em arquivo com heredoc
        run: |
          cat > section.html <<'SECTION'
          ${{ steps.repos.outputs.result }}
          SECTION

      - name: Atualizar README.md com a se√ß√£o de projetos
        run: |
          python << 'PY'
          import re, io

          with io.open('section.html', 'r', encoding='utf-8') as f:
              section = f.read()

          with io.open('README.md', 'r', encoding='utf-8') as f:
              readme = f.read()

          pattern = r'<!-- start-projects -->[\\s\\S]*?<!-- end-projects -->'
          replacement = '<!-- start-projects -->\\n' + section + '\\n<!-- end-projects -->'

          if re.search(pattern, readme):
              readme = re.sub(pattern, replacement, readme)
              print('README atualizado: se√ß√£o substitu√≠da.')
          else:
              readme += '\\n\\n' + replacement + '\\n'
              print('README atualizado: se√ß√£o adicionada.')

          with io.open('README.md', 'w', encoding='utf-8') as f:
              f.write(readme)
          PY

      - name: Commitar e enviar altera√ß√µes (se houver)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          if git diff --cached --quiet; then
            echo "‚úÖ Nenhuma altera√ß√£o para commitar"
          else
            git commit -m "üîÑ Atualiza√ß√£o autom√°tica dos √∫ltimos projetos"
            git push origin HEAD:main
          fi
